for (i in 1:p) {
  if(!is.na(depdeath[i])){
  if (depdeath[i]==99){Etranger[i]<-1}
  if (depdeath[i]==75){Paris_d[i]<-1}
  if (depdeath[i]==92){couronne_d[i]<-1}
  if (depdeath[i]==93){couronne_d[i]<-1}
  if (depdeath[i]==94){couronne_d[i]<-1}
  if (depdeath[i]==95){couronne_d[i]<-1}
  if (depdeath[i]==78){couronne_d[i]<-1}
  if (depdeath[i]==91){couronne_d[i]<-1}
  if (depdeath[i]==77){couronne_d[i]<-1}
  if (depdeath[i]==63){Sud_d[i]<-1}
  if (depdeath[i]==15){Sud_d[i]<-1}
  if (depdeath[i]==43){Sud_d[i]<-1}
  if (depdeath[i]==03){Sud_d[i]<-1}
  if (depdeath[i]==23){Sud_d[i]<-1}
  if (depdeath[i]==87){Sud_d[i]<-1}
  if (depdeath[i]==19){Sud_d[i]<-1}
  if (depdeath[i]==36){Ouest_d[i]<-1}
  if (depdeath[i]==18){Ouest_d[i]<-1}
  if (depdeath[i]==37){Ouest_d[i]<-1}
  if (depdeath[i]==41){Ouest_d[i]<-1}
  if (depdeath[i]==28){Ouest_d[i]<-1}
  if (depdeath[i]==45){Ouest_d[i]<-1}
  if (depdeath[i]==33){Sud_d[i]<-1}
  if (depdeath[i]==40){Sud_d[i]<-1}
  if (depdeath[i]==64){Sud_d[i]<-1}
  if (depdeath[i]==47){Sud_d[i]<-1}
  if (depdeath[i]==24){Sud_d[i]<-1}
  if (depdeath[i]==66){Sud_d[i]<-1}
  if (depdeath[i]==11){Sud_d[i]<-1}
  if (depdeath[i]==34){Sud_d[i]<-1}
  if (depdeath[i]==30){Sud_d[i]<-1}
  if (depdeath[i]==48){Sud_d[i]<-1}
  if (depdeath[i]==09){Sud_d[i]<-1}
  if (depdeath[i]==65){Sud_d[i]<-1}
  if (depdeath[i]==31){Sud_d[i]<-1}
  if (depdeath[i]==32){Sud_d[i]<-1}
  if (depdeath[i]==82){Sud_d[i]<-1}
  if (depdeath[i]==81){Sud_d[i]<-1}
  if (depdeath[i]==12){Sud_d[i]<-1}
  if (depdeath[i]==46){Sud_d[i]<-1}
  if (depdeath[i]==67){Est_d[i]<-1}
  if (depdeath[i]==68){Est_d[i]<-1}
  if (depdeath[i]==89){Est_d[i]<-1}
  if (depdeath[i]==21){Est_d[i]<-1}
  if (depdeath[i]==58){Est_d[i]<-1}
  if (depdeath[i]==71){Est_d[i]<-1}
  if (depdeath[i]==08){Est_d[i]<-1}
  if (depdeath[i]==51){Est_d[i]<-1}
  if (depdeath[i]==10){Est_d[i]<-1}
  if (depdeath[i]==52){Est_d[i]<-1}
  if (depdeath[i]==54){Est_d[i]<-1}
  if (depdeath[i]==55){Est_d[i]<-1}
  if (depdeath[i]==57){Est_d[i]<-1}
  if (depdeath[i]==88){Est_d[i]<-1}
  if (depdeath[i]==70){Est_d[i]<-1}
  if (depdeath[i]==90){Est_d[i]<-1}
  if (depdeath[i]==25){Est_d[i]<-1}
  if (depdeath[i]==39){Est_d[i]<-1}
  if (depdeath[i]==29){Ouest_d[i]<-1}
  if (depdeath[i]==22){Ouest_d[i]<-1}
  if (depdeath[i]==56){Ouest_d[i]<-1}
  if (depdeath[i]==35){Ouest_d[i]<-1}
  if (depdeath[i]==53){Ouest_d[i]<-1}
  if (depdeath[i]==72){Ouest_d[i]<-1}
  if (depdeath[i]==49){Ouest_d[i]<-1}
  if (depdeath[i]==44){Ouest_d[i]<-1}
  if (depdeath[i]==85){Ouest_d[i]<-1}
  if (depdeath[i]==79){Ouest_d[i]<-1}
  if (depdeath[i]==86){Ouest_d[i]<-1}
  if (depdeath[i]==17){Ouest_d[i]<-1}
  if (depdeath[i]==16){Ouest_d[i]<-1}
  if (depdeath[i]==20){Sud_d[i]<-1}
  if (depdeath[i]==1){Sud_d[i]<-1}
  if (depdeath[i]==13){Sud_d[i]<-1}
  if (depdeath[i]==83){Sud_d[i]<-1}
  if (depdeath[i]==84){Sud_d[i]<-1}
  if (depdeath[i]==04){Sud_d[i]<-1}
  if (depdeath[i]==05){Sud_d[i]<-1}
  if (depdeath[i]==06){Sud_d[i]<-1}
  if (depdeath[i]==07){Sud_d[i]<-1}
  if (depdeath[i]==26){Sud_d[i]<-1}
  if (depdeath[i]==42){Sud_d[i]<-1}
  if (depdeath[i]==69){Sud_d[i]<-1}
  if (depdeath[i]==74){Sud_d[i]<-1}
  if (depdeath[i]==38){Sud_d[i]<-1}
  if (depdeath[i]==73){Sud_d[i]<-1}
  if (depdeath[i]==61){Nord_Ouest_d[i]<-1}
  if (depdeath[i]==50){Nord_Ouest_d[i]<-1}
  if (depdeath[i]==14){Nord_Ouest_d[i]<-1}
  if (depdeath[i]==27){Nord_Ouest_d[i]<-1}
  if (depdeath[i]==76){Nord_Ouest_d[i]<-1}
  if (depdeath[i]==59){Nord_Ouest_d[i]<-1}
  if (depdeath[i]==60){Nord_Ouest_d[i]<-1}
  if (depdeath[i]==62){Nord_Ouest_d[i]<-1}
  if (depdeath[i]==80){Nord_Ouest_d[i]<-1}
  if (depdeath[i]==02){Nord_Ouest_d[i]<-1}
  }
}
for (i in 1:length(depdeath)){
  if(!is.na(depdeath[i])){
  if (depdeath[i]==75){Paris_deces[i]<-1}
  if (depdeath[i]==92){Petite_couronne_deces[i]<-1}
  if (depdeath[i]==93){Petite_couronne_deces[i]<-1}
  if (depdeath[i]==94){Petite_couronne_deces[i]<-1}
  if (depdeath[i]==95){Grande_couronne_deces[i]<-1}
  if (depdeath[i]==78){Grande_couronne_deces[i]<-1}
  if (depdeath[i]==91){Grande_couronne_deces[i]<-1}
  if (depdeath[i]==77){Grande_couronne_deces[i]<-1}
  if (Nord_Ouest_d[i]==1){Reste_du_monde_deces[i]<-1}
  if (Ouest_d[i]==1){Reste_du_monde_deces[i]<-1}
  if (Sud_d[i]==1){Reste_du_monde_deces[i]<-1}
  if (Est_d[i]==1){Reste_du_monde_deces[i]<-1}
  if (Etranger[i]==1){Reste_du_monde_deces[i]<-1}
  }
}
Ind_Region_deces = NULL
New_Region_deces<-NULL
for (i in 1:p) {
  if (Paris_deces[i]==1){New_Region_deces[i]<-"Paris"}
  if (Petite_couronne_deces[i]==1){New_Region_deces[i]<-"Petite couronne"}
  if (Grande_couronne_deces[i]==1){New_Region_deces[i]<-"Grande couronne"}
  if (Reste_du_monde_deces[i]==1){New_Region_deces[i]<-"Reste du monde"}
  if (Paris_deces[i]==1){Ind_Region_deces[i]=0}
  if (Petite_couronne_deces[i]==1){Ind_Region_deces[i]=1}
  if (Grande_couronne_deces[i]==1){Ind_Region_deces[i]=2}
  if (Reste_du_monde_deces[i]==1){Ind_Region_deces[i]=3}
}
#Département de naissance
T1codebirth<-as.numeric(T1codebirth)
T1depbirth<-floor(T1codebirth/1000)
#Age à la signature du contrat de la tete
T1age_at_contrat<-annee-T1ybirth
# Nord-Ouest : régions Basse-Normandie (14 50 61 ), Haute-Normandie (27 76), Nord-Pas-de-Calais (59 62) et Picardie (60 80 02).
# Ouest :  Bretagne (29 22 56 35), Pays de la Loire (53 72 49 44 85) et Poitou-Charentes(79 86 17 16).
# Est :  Alsace(67 68), Bourgogne(89 21 58 71), Champagne-Ardenne (08 51 10 52), Lorraine (54 55 57 88) et Franche-Comté (70 90 25 39).
# Sud-Ouest : Aquitaine (33 40 64 47 24), Languedoc-Roussillon (66 11 34 30 48)et Midi-Pyrénées (09 65 31 32 82 81 12 46).
#Sud-Est :  Corse (2A 2B), Provence-Alpes-Côte d'Azur (13 83 84 04 05 06) et Rhône-Alpes(07 26 42 69 01 74 38 73).
#   Auvergne (63 15 43 03), Limousin (23 87 19) et Centre (36 18 37 41 28 45).
# Île-de-France : 75 92 93 94 95 78 91 77 
# Outre-Mers : 971 972 973 974 976
#Nouvelle région de décès
Paris_birth<-rep(0,length(T1depbirth))
Petite_couronne_birth<-rep(0,length(T1depbirth))
Grande_couronne_birth<-rep(0,length(T1depbirth))
Reste_du_monde_birth<-rep(0,length(T1depbirth))
#Création des indicatrices Région 
m=length(T1depbirth)
Nord_Ouest<-rep(0,m)
Ouest<-rep(0,m)
Est<-rep(0,m)
Sud<-rep(0,m)
Paris_n<-rep(0,m)
couronne_n<-rep(0,m)
Outre_Mer<-rep(0,m)
for (i in 1:m) {
  if (T1depbirth[i]==97){Outre_Mer[i]<-1}
  if (T1depbirth[i]==75){Paris_n[i]<-1}
  if (T1depbirth[i]==92){couronne_n[i]<-1}
  if (T1depbirth[i]==93){couronne_n[i]<-1}
  if (T1depbirth[i]==94){couronne_n[i]<-1}
  if (T1depbirth[i]==95){couronne_n[i]<-1}
  if (T1depbirth[i]==78){couronne_n[i]<-1}
  if (T1depbirth[i]==91){couronne_n[i]<-1}
  if (T1depbirth[i]==77){couronne_n[i]<-1}
  if (T1depbirth[i]==63){Sud[i]<-1}
  if (T1depbirth[i]==15){Sud[i]<-1}
  if (T1depbirth[i]==43){Sud[i]<-1}
  if (T1depbirth[i]==03){Sud[i]<-1}
  if (T1depbirth[i]==23){Sud[i]<-1}
  if (T1depbirth[i]==87){Sud[i]<-1}
  if (T1depbirth[i]==19){Sud[i]<-1}
  if (T1depbirth[i]==36){Ouest[i]<-1}
  if (T1depbirth[i]==18){Ouest[i]<-1}
  if (T1depbirth[i]==37){Ouest[i]<-1}
  if (T1depbirth[i]==41){Ouest[i]<-1}
  if (T1depbirth[i]==28){Ouest[i]<-1}
  if (T1depbirth[i]==45){Ouest[i]<-1}
  if (T1depbirth[i]==33){Sud[i]<-1}
  if (T1depbirth[i]==40){Sud[i]<-1}
  if (T1depbirth[i]==64){Sud[i]<-1}
  if (T1depbirth[i]==47){Sud[i]<-1}
  if (T1depbirth[i]==24){Sud[i]<-1}
  if (T1depbirth[i]==66){Sud[i]<-1}
  if (T1depbirth[i]==11){Sud[i]<-1}
  if (T1depbirth[i]==34){Sud[i]<-1}
  if (T1depbirth[i]==30){Sud[i]<-1}
  if (T1depbirth[i]==48){Sud[i]<-1}
  if (T1depbirth[i]==09){Sud[i]<-1}
  if (T1depbirth[i]==65){Sud[i]<-1}
  if (T1depbirth[i]==31){Sud[i]<-1}
  if (T1depbirth[i]==32){Sud[i]<-1}
  if (T1depbirth[i]==82){Sud[i]<-1}
  if (T1depbirth[i]==81){Sud[i]<-1}
  if (T1depbirth[i]==12){Sud[i]<-1}
  if (T1depbirth[i]==46){Sud[i]<-1}
  if (T1depbirth[i]==67){Est[i]<-1}
  if (T1depbirth[i]==68){Est[i]<-1}
  if (T1depbirth[i]==89){Est[i]<-1}
  if (T1depbirth[i]==21){Est[i]<-1}
  if (T1depbirth[i]==58){Est[i]<-1}
  if (T1depbirth[i]==71){Est[i]<-1}
  if (T1depbirth[i]==08){Est[i]<-1}
  if (T1depbirth[i]==51){Est[i]<-1}
  if (T1depbirth[i]==10){Est[i]<-1}
  if (T1depbirth[i]==52){Est[i]<-1}
  if (T1depbirth[i]==54){Est[i]<-1}
  if (T1depbirth[i]==55){Est[i]<-1}
  if (T1depbirth[i]==57){Est[i]<-1}
  if (T1depbirth[i]==88){Est[i]<-1}
  if (T1depbirth[i]==70){Est[i]<-1}
  if (T1depbirth[i]==90){Est[i]<-1}
  if (T1depbirth[i]==25){Est[i]<-1}
  if (T1depbirth[i]==39){Est[i]<-1}
  if (T1depbirth[i]==29){Ouest[i]<-1}
  if (T1depbirth[i]==22){Ouest[i]<-1}
  if (T1depbirth[i]==56){Ouest[i]<-1}
  if (T1depbirth[i]==35){Ouest[i]<-1}
  if (T1depbirth[i]==53){Ouest[i]<-1}
  if (T1depbirth[i]==72){Ouest[i]<-1}
  if (T1depbirth[i]==49){Ouest[i]<-1}
  if (T1depbirth[i]==44){Ouest[i]<-1}
  if (T1depbirth[i]==85){Ouest[i]<-1}
  if (T1depbirth[i]==79){Ouest[i]<-1}
  if (T1depbirth[i]==86){Ouest[i]<-1}
  if (T1depbirth[i]==17){Ouest[i]<-1}
  if (T1depbirth[i]==16){Ouest[i]<-1}
  if (T1depbirth[i]==20){Sud[i]<-1}
  if (T1depbirth[i]==1){Sud[i]<-1}
  if (T1depbirth[i]==13){Sud[i]<-1}
  if (T1depbirth[i]==83){Sud[i]<-1}
  if (T1depbirth[i]==84){Sud[i]<-1}
  if (T1depbirth[i]==04){Sud[i]<-1}
  if (T1depbirth[i]==05){Sud[i]<-1}
  if (T1depbirth[i]==06){Sud[i]<-1}
  if (T1depbirth[i]==07){Sud[i]<-1}
  if (T1depbirth[i]==26){Sud[i]<-1}
  if (T1depbirth[i]==42){Sud[i]<-1}
  if (T1depbirth[i]==69){Sud[i]<-1}
  if (T1depbirth[i]==74){Sud[i]<-1}
  if (T1depbirth[i]==38){Sud[i]<-1}
  if (T1depbirth[i]==73){Sud[i]<-1}
  if (T1depbirth[i]==61){Nord_Ouest[i]<-1}
  if (T1depbirth[i]==50){Nord_Ouest[i]<-1}
  if (T1depbirth[i]==14){Nord_Ouest[i]<-1}
  if (T1depbirth[i]==27){Nord_Ouest[i]<-1}
  if (T1depbirth[i]==76){Nord_Ouest[i]<-1}
  if (T1depbirth[i]==59){Nord_Ouest[i]<-1}
  if (T1depbirth[i]==60){Nord_Ouest[i]<-1}
  if (T1depbirth[i]==62){Nord_Ouest[i]<-1}
  if (T1depbirth[i]==80){Nord_Ouest[i]<-1}
  if (T1depbirth[i]==02){Nord_Ouest[i]<-1}
}
for (i in 1:length(T1depbirth)){
  if(!is.na(T1depbirth[i])){
    if (T1depbirth[i]==75){Paris_birth[i]<-1}
    if (T1depbirth[i]==92){Petite_couronne_birth[i]<-1}
    if (T1depbirth[i]==93){Petite_couronne_birth[i]<-1}
    if (T1depbirth[i]==94){Petite_couronne_birth[i]<-1}
    if (T1depbirth[i]==95){Grande_couronne_birth[i]<-1}
    if (T1depbirth[i]==78){Grande_couronne_birth[i]<-1}
    if (T1depbirth[i]==91){Grande_couronne_birth[i]<-1}
    if (T1depbirth[i]==77){Grande_couronne_birth[i]<-1}
    if (Nord_Ouest_d[i]==1){Reste_du_monde_birth[i]<-1}
    if (Ouest_d[i]==1){Reste_du_monde_birth[i]<-1}
    if (Sud_d[i]==1){Reste_du_monde_birth[i]<-1}
    if (Est_d[i]==1){Reste_du_monde_birth[i]<-1}
    if (Etranger[i]==1){Reste_du_monde_birth[i]<-1}
  }
}
#Nouvelle région den naissance
Ind_Region_birth = NULL
for (i in 1:length(T1depbirth)){
  if (Paris_birth[i]==1){Ind_Region_birth[i]=0}
  if (Petite_couronne_birth[i]==1){Ind_Region_birth[i]=1}
  if (Grande_couronne_birth[i]==1){Ind_Region_birth[i]=2}
  if (Reste_du_monde_birth[i]==1){Ind_Region_birth[i]=3}
}
#################
## FIN ETAPE 1 ##
#################
#############################################################
########################## PACKAGES #########################
#############################################################
  library(maxLik)    #mle
#############################################################
########################## FENETRE D'OBSERVATION ############
#############################################################
t_end=20000  # max(T1deathdate)=18092
#############################################################
########################## INITIATION #######################
#############################################################
init0=c(10^-5,10^-2,0.1,10^-4,6*10^-4,10^-5,3*10^-4,0.21,0.0014,10^-4,6*10^-5,10^-5,3*10^-4)
maxl=NULL
#############################################################
################# CONSTRUCTION DE LA BASE DE DONNEES ########
######################## REDUITE ET SANS na #################
#############################################################
n_seller=2 # le nombre de caracteristique utilisé pour le seller
n_clone=2 # le nombre de caracteristique utilisé pour le clone 
caracteristique_clone=NULL
caracteristique_seller=NULL
caracteristique_seller=age_at_viager
caracteristique_seller=c(caracteristique_seller,Ind_Region_birth)   # pour ajouter des caracteristiques
carac_seller=matrix(caracteristique_seller,ncol=n_seller)
#caracteristique_clone=(dayoflifemean-delta_age_clone)/365
caracteristique_clone=Ind_Region_birth
caracteristique_clone=c(caracteristique_clone,T1sex-1)
carac_clone=matrix(caracteristique_clone,ncol=n_clone)
contrat=datecontrat
resi_seller=delta_age
resi_clone=delta_age_clone
data_seller=data.frame(residu=resi_seller,carac=carac_seller,date=contrat)
data_clone=data.frame(residu=resi_clone,carac=carac_seller,date=contrat)
              ####################################
              ######## nettoyage #################
individu_enleve_s=NULL
for (i in 1:length(data_seller$carac.1))
{
if (is.na(data_seller$carac.1[i]) || is.na(data_seller$carac.2[i]) || data_seller$residu[i]<0 || is.na(contrat[i]) )
{
individu_enleve_s=c(individu_enleve_s,i)
}
}
individu_enleve_c=NULL
for (i in 1:length(datecontrat))
{
if (is.na(data_clone$carac.1[i]) || is.na(data_clone$carac.2[i]) || data_clone$residu[i]<0 || is.na(contrat[i]) )
{
individu_enleve_c=c(individu_enleve_c,i)
}
}
data_clone=data_clone[-c(individu_enleve_s,individu_enleve_c),]
data_seller=data_seller[-c(individu_enleve_s,individu_enleve_c),]
# individu_enleve_c==individu_enleve_s
length(individu_enleve_c)
length(individu_enleve_s)
#############################################################
#################### LES INDICATRICES #######################
#############################################################
resi_tot=c(data_seller$residu,data_clone$residu)
a=quantile(resi_tot)
limits=c(a[[1]],a[[2]],a[[3]],a[[4]],a[[5]])
ind1= function (d)
{
res=0
#print(d)
if (d<=limits[2])
{
res=1
}
return (res)
}
ind2= function (d)
{
res=0
if (d> limits[2] & d<=limits[3])
{
res=1
}
return (res)
}
ind3= function (d)
{
res=0
if (d> limits[3] & d<=limits[4])
{
res=1
}
return (res)
}
ind4= function (d)
{
res=0
if (d> limits[4])
{
res=1
}
return (res)
}
#############################################################
#################### LOG-LIKELIHOOD #########################
#############################################################
#steps=c(1,2,3,4)
log_like=function (alpha, steps, beta,resi_,carac_,contrat_)
{
Psi1 = function(d)
{
print(d)
ind=c(ind1(d),ind2(d),ind3(d),ind4(d))
res=t(ind)%*%steps
return(res)
}
lambda = function(d,x,t)
{
return(Psi1(d)*exp(beta%*%x+alpha*t))
}
logLambda = function (d,x,t)
{
return (log(Psi1(d))+beta%*%x+alpha*t)
}
intLambda= function(d,x,t)
{
res=NULL
expo=exp(beta%*%x+alpha*t)
ind=c(ind1(d),ind2(d),ind3(d),ind4(d))
interval=which(ind==1)                   #reperer l'intervalle dans lequel se trouve d
if (interval==1)
{
return (steps[1]*d*expo)
}
else
{
for (i in 1:(interval-1))
{
res=c(res,steps[i]*(limits[i+1]-limits[i]))
}
return ((sum(res)+steps[interval]*(d-limits[interval]))*expo)
}
}
S= function (d,x,t)
{
return (exp(-intLambda(d,x,t)))
}
logS =function (d,x,t)
{
return (-intLambda(d,x,t))
}
logDensite = function (d,x,t)
{
res = logLambda(d,x,t) + logS(d,x,t)
return (res)
}
###############################################################
       ############# contribution du seller
logcontribution=function(d,x,t)
{
if (abs(S(t_end-t,x,t))>10^-7){
return(logDensite(d,x,t)-log(1-S(t_end-t,x,t)))
}
else
{
return (logDensite(d,x,t)+S(t_end-t,x,t))
}
}
contrib=NULL
for (i in 1:length(contrat_))
{
contrib[i]=logcontribution(resi_[i],carac_[i,],contrat_[i])
}
res=sum(contrib,na.rm=TRUE)
#print(res)
return (res)
}
##############################################################
################## la minusLogLike ###########################
##############################################################
resi_s=data_seller$residu
caracteristique_s=matrix(c(data_seller$carac.1,data_seller$carac.2),ncol=n_seller)
contrat=data_seller$date
resi_c=data_clone$residu
caracteristique_c=matrix(c(data_seller$carac.1,data_seller$carac.2),ncol=n_seller)
        Vminuslike=function (alpha,beta1_s,beta2_s,step1_s,step2_s,step3_s,step4_s,beta1_c,beta2_c,step1_c,step2_c,step3_c,step4_c)
{
  beta_s=c(beta1_s,beta2_s)
  step_s=c(exp(step1_s),exp(step2_s),exp(step3_s),exp(step4_s))
  step_c=c(exp(step1_c),exp(step2_c),exp(step3_c),exp(step4_c))
  beta_c=c(beta1_c,beta2_c)
res=-log_like(alpha,step_s,beta_s,resi_s,caracteristique_s,contrat)- log_like(alpha,step_c,  beta_c, resi_c, caracteristique_c, contrat)
  #print(res)
return (res)
}
        loglike=function (param) #(alpha,beta1_s,beta2_s,step1_s,step2_s,step3_s,step4_s,beta1_c,beta2_c,step1_c,step2_c,step3_c,step4_c)
{
  beta_s=c(param[2],param[3])
  step_s=c(exp(param[4]),exp(param[5]),exp(param[6]),exp(param[7]))
  step_c=c(exp(param[10]),exp(param[11]),exp(param[12]),exp(param[13]))
  beta_c=c(param[8],param[9])
alpha=param[1]
res=log_like(alpha,step_s,beta_s,resi_s,caracteristique_s,contrat)+ log_like(alpha,step_c,  beta_c, resi_c, caracteristique_c, contrat)
return (res)
}
##############################################################
##################estimation ###########################
##############################################################
init=init0
maxl = maxLik(loglike , start = c(alpha=init[1],beta1_s=init[2],beta2_s=init[3],step1_s=init[4],step2_s=init[5],step3_s=init[6],step4_s=init[7],beta1_c=init[8],beta2_c=init[9],step1_c=init[10],step2_c=init[11],step3_c=init[12],step4_c=init[13]),method="NM")
summary(maxl)
nbupdate = 3
while ((nbupdate>0) ){
init[1] = maxl$estimate[[1]]
init[2] = maxl$estimate[[2]]
init[3] = maxl$estimate[[3]]
init[4] = maxl$estimate[[4]]
init[5] = maxl$estimate[[5]]
init[6] = maxl$estimate[[6]]
init[7] = maxl$estimate[[7]]
init[8] = maxl$estimate[[8]]
init[9] = maxl$estimate[[9]]
init[10] = maxl$estimate[[10]]
init[11] = maxl$estimate[[11]]
init[12] = maxl$estimate[[12]]
init[13] = maxl$estimate[[13]]
maxl = maxLik(loglike , start = c(alpha=init[1],beta1_s=init[2],beta2_s=init[3],step1_s=init[4],step2_s=init[5],step3_s=init[6],step4_s=init[7],beta1_c=init[8],beta2_c=init[9],step1_c=init[10],step2_c=init[11],step3_c=init[12],step4_c=init[13]),method="NM")
print(nbupdate)
summary(maxl)
nbupdate = nbupdate -1
}
summary(maxl)
data_seller$residu
q()
